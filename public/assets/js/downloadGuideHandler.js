
document.addEventListener('click', function (event) {
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º .download-btn
    const button = event.target.closest('.download-btn');

    // –ï—Å–ª–∏ –∫–ª–∏–∫ –ù–ï –ø–æ –∫–Ω–æ–ø–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if (!button) return;

    // –û—Ç–º–µ–Ω—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
    event.preventDefault();

    // –ü–æ–ª—É—á–∞–µ–º guideId
    const guideId = button.getAttribute('data-guide-id');
    if (!guideId) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω data-guide-id');
        return;
    }

    downloadGuide(guideId)
})

function downloadGuide(guideId) {
    fetch(`/library/download/${guideId}`)
        .then(response => {
            if (response.ok) {
                const data = response.json()
                return data;
            }
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ');
        })
        .then(data => {
            if (data.subscribed) {
                // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî —Å—Ä–∞–∑—É —Å–∫–∞—á–∏–≤–∞–µ–º
                startDownload(guideId);
            } else {
                // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                showSubscriptionPrompt(guideId);
            }
        })
        .catch(err => {
            console.error(err);
            alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞.");
        });
}

function startDownload(guideId) {
    // –°–æ–∑–¥–∞—ë–º —Å–∫—Ä—ã—Ç—É—é —Å—Å—ã–ª–∫—É –∏ "–∫–ª–∏–∫–∞–µ–º" –ø–æ –Ω–µ–π
    const a = document.createElement('a');
    a.href = `/library/${guideId}`;
    a.download = true;
    a.style.display = 'none';
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
}

function showSubscriptionModal(guideId) {
    // –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.id = 'subscription-modal';
    modal.innerHTML = `
      <div class="modal-container">
        <h3>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!</h3>
        <p>–ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é.</p>
        <div id="email-error-message" class="error-message"></div>
        <input id="subscriber-email" type="email" placeholder="–í–∞—à email">
        <br>
        <button class="btn large modal-btn-subscribe" onclick="subscribeAndDownload('${guideId}')">
          –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ —Å–∫–∞—á–∞—Ç—å
        </button>
        <button class="button large modal-btn-download" onclick="skipAndDownload('${guideId}')">
          –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å
        </button>
      </div>
    `;

    document.body.appendChild(modal);
}

function closeSubscriptionModal() {
    const modal = document.getElementById('subscription-modal');
    if (modal) modal.remove();
}

function subscribeAndDownload(guideId) {
    const emailInput = document.getElementById('subscriber-email');
    const errorElement = document.getElementById('email-error-message');
    // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å error –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –≤–≤–æ–¥–∞
    emailInput.addEventListener('input', function () {
        this.classList.remove('error');
        // errorElement.style.display = 'none';
        errorElement.textContent = '';
    });

    const email = emailInput?.value.trim();
    if (!email) {
        alert('–í–≤–µ–¥–∏—Ç–µ email');
        return;
    }
    if (email && !isValidEmail(email)) {
        emailInput.classList.add('error')
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥ –ø–æ–ª–µ–º
        errorElement.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
        errorElement.style.display = 'block';
        // Swal.fire({
        //     icon: 'error',
        //     title: '–û—à–∏–±–∫–∞',
        //     text: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email',
        //     confirmButtonText: '–ó–∞–∫—Ä—ã—Ç—å'
        // });
        return;
    }
    fetch('/subscribe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email })
    })
        .then(() => {
            closeSubscriptionModal();
            startDownload(guideId);
        })
        .catch(() => {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.');

            closeSubscriptionModal();
            startDownload(guideId);
        });
}

function skipAndDownload(guideId) {
    closeSubscriptionModal();
    startDownload(guideId);
}

function isValidEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
}

function showSubscriptionPrompt(guideId) {
    console.log('üì• –ù–∞—á–∞–ª–æ: guideId =', guideId, typeof guideId);

    Swal.fire({
        title: '<strong>–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!</strong>',
        html: `
      <p>–ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —á–µ–∫-–ª–∏—Å—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é</p>
      <input type="email" id="swal-input-email" class="swal2-input" placeholder="–í–∞—à email">
    `,
        icon: 'info',
        showCloseButton: true,
        showCancelButton: true,
        focusConfirm: false,
        confirmButtonText: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –∏ —Å–∫–∞—á–∞—Ç—å',
        cancelButtonText: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å',
        customClass: {
            popup: 'swal2-custom-popup',
            title: 'swal2-custom-title',
            confirmButton: 'swal2-custom-btn swal2-confirm-btn large',
            cancelButton: 'swal2-custom-btn swal2-cancel-btn large'
        },
        buttonsStyling: false,
        preConfirm: () => {
            const input = document.getElementById('swal-input-email');
            const email = input.value.trim();
            input.classList.remove('error');

            if (!email) {
                // –ü—É—Å—Ç–æ–µ –ø–æ–ª–µ
                input.classList.add('error');
                Swal.showValidationMessage('–í–≤–µ–¥–∏—Ç–µ email');
                return false;
            }

            if (!/^\S+@\S+\.\S+$/.test(email)) {
                // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                input.classList.add('error');
                Swal.showValidationMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
                return false;
            }

            return { email };
        },
        // –°–±—Ä–æ—Å —Å—Ç–∏–ª–µ–π –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤–≤–æ–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        didOpen: () => {
            const input = document.getElementById('swal-input-email');
            input.addEventListener('input', () => {
                input.classList.remove('error');
                Swal.resetValidationMessage();
            });
        }
    }).then((result) => {
        if (result.dismiss === Swal.DismissReason.cancel) {
            console.log('‚úÖ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å: guideId =', guideId); // ‚Üê –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ç–æ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            startDownload(guideId);
        } else if (result.dismiss === Swal.DismissReason.backdrop) {
            console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–æ –∫–ª–∏–∫–æ–º –º–∏–º–æ: guideId =', guideId);
        } else if (result.dismiss === Swal.DismissReason.esc) {
            console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–æ Esc: guideId =', guideId);
        } else if (result.dismiss === Swal.DismissReason.close) {
            console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–æ –∫—Ä–µ—Å—Ç–∏–∫–æ–º: guideId =', guideId);
        }
        if (result.isConfirmed) {
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            // –ü–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email
            fetch('/subscribe', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', 'CSRF-Token': csrfToken },
                body: JSON.stringify({ email: result.value.email })
            })
                .catch(console.warn)
                .finally(() => {
                    // startDownload(guideId); // –°–∫–∞—á–∏–≤–∞–µ–º –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
                });
        }
        else if (result.dismiss === Swal.DismissReason.cancel) {
            // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å"
            console.log("id - ", guideId)
            startDownload(guideId);
        }
    });
}